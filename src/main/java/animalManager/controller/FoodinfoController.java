package animalManager.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import java.util.Calendar;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

import animalManager.model.Foodinfo;
import animalManager.repository.FoodinfoRepository;
import animalManager.model.FoodStat;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/food") // This means URL's start with /demo (after Application path)
public class FoodinfoController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private FoodinfoRepository foodinfoRepository;

	@RequestMapping(path="/add")
	public @ResponseBody String addNewFood (@RequestParam String username, 
			@RequestParam int year, @RequestParam int month, 
			@RequestParam int day, @RequestParam String type, 
			@RequestParam int weight, @RequestParam int energy) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Foodinfo foodinfo = new Foodinfo();
		foodinfo.setUserName(username);
		foodinfo.setYear(year);
		foodinfo.setMonth(month);
		foodinfo.setDay(day);
		foodinfo.setType(type);
		foodinfo.setWeight(weight);
		foodinfo.setEnergy(energy);
		foodinfoRepository.save(foodinfo);
		return "FoodSaved";
	}

	@RequestMapping(path="/all")
	public @ResponseBody Iterable<Foodinfo> getAllFoods() {
		// This returns a JSON or XML with the users
		return foodinfoRepository.findAll();
	}
	
	@RequestMapping(path="/finddaily")
	public @ResponseBody Iterable<Foodinfo> getDailyFood(@RequestParam String username, @RequestParam int year, @RequestParam int month, @RequestParam int day) {
		return foodinfoRepository.findDailyFood(username, year, month, day);
	}

	// @RequestMapping(path="/findmonth")
	// public @ResponseBody Iterable<Foodinfo> getMonthFood(@RequestParam String username, @RequestParam int year, @RequestParam int month) {
	// 	return foodinfoRepository.findMonthFood(username, year, month);
	// }

	@RequestMapping(path="/findmonth")
	public @ResponseBody Iterable<FoodStat> getMonthFood(@RequestParam String username, @RequestParam int year, @RequestParam int month) {
		Iterable<Foodinfo> foodinfoIter = foodinfoRepository.findMonthFood(username, year, month);

		Calendar c = Calendar.getInstance();
        c.set(year, month-1 , 10);
		int num = c.getActualMaximum(Calendar.DAY_OF_MONTH);

		List<FoodStat> foodStatList = new ArrayList<>();
		for (int i = 0; i < num; i++) {
			FoodStat foodStat = new FoodStat();
			foodStat.setDay(i+1);
			foodStat.setWeight(0);
			foodStat.setEnergy(0);
			foodStatList.add(foodStat);
		}

		for(Foodinfo foodinfo: foodinfoIter){
			int day = foodinfo.getDay();
			if (day < num) {
				FoodStat foodStat = foodStatList.get(day-1);
				foodStat.setWeight(foodStat.getWeight() + foodinfo.getWeight());
				foodStat.setEnergy(foodStat.getEnergy() + foodinfo.getEnergy());
			}
		}

		return foodStatList;
	}

	@RequestMapping(path="/delete")
	public @ResponseBody String deleteFood(@RequestParam String username, @RequestParam int year, @RequestParam int month, @RequestParam int day, @RequestParam String type){
		foodinfoRepository.deleteFood(username, year, month, day, type);
		return "FoodDeleted";
	}

	@RequestMapping(path="/update")
	public @ResponseBody String updateFood(@RequestParam String username, 
			@RequestParam int year, @RequestParam int month, 
			@RequestParam int day, @RequestParam String type, 
			@RequestParam int weight, @RequestParam int energy){
		foodinfoRepository.updateFood(username, year, month, day, type, weight, energy);
		return "FoodUpdate";
	}

	@RequestMapping(path="/adddaily")
	public @ResponseBody String addDailyFood(@RequestParam String username, 
			@RequestParam int year, @RequestParam int month, 
			@RequestParam int day, @RequestParam String type,
			@RequestParam int weight, @RequestParam int energy){
		Iterable<Foodinfo> foodInfoIter = foodinfoRepository.findFoodRecord(username, year, month, day, type);
        Iterator<Foodinfo> iter = foodInfoIter.iterator();
        Foodinfo foodinfo = null;
        if (iter.hasNext()) {
        	foodinfo = iter.next();
        }
        if (foodinfo != null) {
        	foodinfoRepository.updateFood(username, year, month, day, type, weight+foodinfo.getWeight(), energy+foodinfo.getEnergy());
        	return "FoodUpdate";
        }else {
        	foodinfo = new Foodinfo();
			foodinfo.setUserName(username);
			foodinfo.setYear(year);
			foodinfo.setMonth(month);
			foodinfo.setDay(day);
			foodinfo.setType(type);
			foodinfo.setWeight(weight);
			foodinfo.setEnergy(energy);
			foodinfoRepository.save(foodinfo);
			return "FoodAdd";
        }
	}
}