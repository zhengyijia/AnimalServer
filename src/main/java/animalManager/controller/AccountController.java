package animalManager.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import animalManager.model.Account;
import animalManager.repository.AccountRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/account") // This means URL's start with /demo (after Application path)
public class AccountController {
	@Autowired // This means to get the bean called accountRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private AccountRepository accountRepository;

	@RequestMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewAccount (@RequestParam String name
			, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Account account = new Account();
		account.setName(name);
		account.setPassword(password);
		accountRepository.save(account);
		return "AccountSaved";
	}

	@RequestMapping(path="/all")
	public @ResponseBody Iterable<Account> getAllAccounts() {
		// This returns a JSON or XML with the accounts
		return accountRepository.findAll();
	}
	
	@RequestMapping(path="/find")
	public @ResponseBody Iterable<Account> getAccount(@RequestParam String name) {
		return accountRepository.findAccount(name);
	}

	@RequestMapping(path="/delete")
	public @ResponseBody String deleteAccount(@RequestParam String name){
		accountRepository.deleteAccount(name);
		return "AccountDeleted";
	}

	@RequestMapping(path="/update")
	public @ResponseBody String updateAccount(@RequestParam String name, 
			@RequestParam String password){
		accountRepository.updateAccount(name, password);
		return "AccountUpdate";
	}

	@RequestMapping(path="/verify")
	public @ResponseBody String verifyAccount(@RequestParam String name, 
			@RequestParam String password) {
		Iterable<Account> accounts = accountRepository.findAccount(name);
		Account account = null;
		for(Account temp: accounts){
			account = temp;
		}
		if(account!=null && account.getPassword().equals(password)){
			return "True";
		}else{
			return "False";
		}
	}
	
	@RequestMapping(path="/reset")
	public @ResponseBody String resetAccount(@RequestParam String name, 
			@RequestParam String oldpassword, @RequestParam String newpassword){
		Iterable<Account> accounts = accountRepository.findAccount(name);
		Account account = null;
		for(Account temp: accounts){
			account = temp;
		}
		if(account==null){
			return "UserNotExist";
		}else{
			if(!account.getPassword().equals(oldpassword)){
				return "WrongPassword";
			}else{
				accountRepository.updateAccount(name, newpassword);
				return "AccountReset";
			}
		}
	}
}